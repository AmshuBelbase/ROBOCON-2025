import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression



X = np.array([
        [38.07947177,  4.11148938],
        [95.12071633, 64.00463072],
        [73.46740024, 32.12124213],
        [60.26718994, 51.34849843],
        [16.4458454 , 90.84908092],
        [16.44345751, 25.67993069],
        [ 6.7502776 , 41.62790938],
        [86.75143843, 75.79956272],
        [60.51038616, 23.65101838],
        [71.0991852 ,  8.62101107],
        [ 3.03786494, 29.68539384],
        [97.02107536, 16.96090744],
        [83.41182144, 93.04006758],
        [22.02157196, 81.00391758],
        [19.00067175, 63.70697189],
        [19.15704648, 87.27459843],
        [31.11998205, 80.56353561],
        [52.95088673, 19.47043583],
        [43.76255685, 89.36334085],
        [29.83168488, 54.39488195],
        [61.57343658, 80.93657536],
        [14.8098922 , 89.71303869],
        [29.9223202 , 32.48234402],
        [37.26982249, 11.89514053],
        [46.15092844, 23.56558109],
        [78.73242018, 43.28367107],
        [20.76770443, 81.98346183],
        [51.9092094 , 86.21232774],
        [59.64904232,  1.68826092],
        [ 5.59859086, 51.56398296],
        [61.14694034, 42.32368931],
        [17.88188825, 22.98867324],
        [ 7.44010771, 12.86667137],
        [94.93966819, 34.42390197],
        [96.59757127, 94.34806069],
        [81.03133746, 32.99709027],
        [31.15676315, 52.36027155],
        [10.66953929, 70.59887693],
        [68.73906962, 36.99933064],
        [44.57509688, 97.20642619],
        [13.08178525, 96.2822822 ],
        [50.0225141 , 25.92644729],
        [ 4.40446359, 50.22760208],
        [91.02271981, 30.78695267],
        [26.61921818, 29.19920894],
        [66.58970615,  4.65180779],
        [31.85939653, 61.34686906],
        [52.4867341 , 50.7652233 ],
        [55.12431765,  6.09639637],
        [19.3005911 , 28.58599996],
        [96.98887815, 90.91832271],
        [77.73814951, 24.71662718],
        [94.01039521, 15.34459234],
        [89.58790769, 49.45582327],
        [60.1920979 , 98.57939496],
        [92.26554927, 24.96347188],
        [ 9.7607577 , 67.54141919],
        [20.40230338, 76.40034192],
        [ 5.4775016 , 24.52611686],
        [33.20770275, 73.09341851],
        [39.47905168, 37.41053014],
        [27.86355415, 63.59827723],
        [83.04501341, 63.71944137],
        [36.31857934, 54.04169372],
        [28.81251646,  9.93868724],
        [54.72691223, 83.69494706],
        [14.95149827, 32.75722643],
        [80.41750109, 19.46533253],
        [ 8.38051372,  5.03673901],
        [98.70180672, 59.49840138],
        [77.45223216, 68.07887182],
        [20.67285247,  2.64219506],
        [ 1.5466896 , 51.69721277],
        [81.73068142, 23.42308174],
        [70.97887704, 64.87210625],
        [73.17170964, 18.26227647],
        [77.35576432, 69.40283607],
        [ 8.33042052, 39.28679928],
        [36.48810713, 93.73626888],
        [12.47103689, 14.61457347],
        [86.44723916, 34.76556875],
        [62.70651456, 12.2338786 ],
        [33.75890446, 92.54466821],
        [ 7.29227668, 87.85659598],
        [31.78724985, 26.53622114],
        [33.19314888, 66.33842056],
        [73.23101166, 81.90499782],
        [64.11818966, 55.96488035],
        [88.83406152, 53.43540726],
        [47.74927759, 24.9433768 ],
        [12.83983035, 10.21717401],
        [71.61123394, 89.82436004],
        [76.31771981, 90.14138766],
        [56.56644256, 63.67704427],
        [77.32575082, 34.56394931],
        [49.88576404, 35.57174789],
        [52.75055011, 72.86961221],
        [43.32656082, 89.81391574],
        [ 3.51649355, 88.821556  ]
        
])
#[11.68125127, 78.20767904] , ,  23.75812167

y = np.array([ 79.22552957, 465.47894121, 282.30194453, 189.575407  ,
         35.57763654,  26.65892727,   7.57063218, 391.84735842,
        188.91146388, 266.94876017,  17.14497088, 477.05986887,
        365.48468046,  38.74150374,  34.07278631,  40.45182435,
         59.61262964, 147.00525254, 103.99139716,  52.04926617,
        201.60699331,  25.36379639,  57.12518664,  83.94475387,
        117.26738667, 328.50587987,  32.70109706, 160.91551671,
        191.07939704,   8.82834269, 192.86266383,  29.09011863,
         12.03644635, 465.27974931, 481.75116875, 338.9296507 ,
         55.87403405,  10.23568361, 245.1303898 , 116.54514985,
         22.51559245, 129.66169537,  13.34269767, 427.10697152,
         41.88582791, 232.61762803,  62.88250704, 143.55096802,
        163.90634854,  32.28714347, 488.48493012, 318.17150356,
        445.46971135, 408.09420973, 196.68699068, 438.96441299,
         19.36510055,  52.36836687,  15.09038725,  73.00820684,
         93.8221008 ,  53.98378705, 355.1589496 ,  81.36805719,
         47.94208978, 161.0785015 ,  19.73326408, 334.34205479,
         25.23604552, 489.5509586 , 315.41608044,  23.38402796,
          9.31086949, 350.14265968, 264.16761258, 272.86409896,
        307.70128023,  18.04638803,  75.72935299,  19.29706821,
        384.9270842 , 203.71436301,  80.47924201,  18.46415795,
         51.19183635,  68.01168082, 277.28727101, 221.49822537,
        402.21498279, 124.17429462,  21.07451378, 273.43194806,
        297.92247747, 170.22592634, 307.62577888, 132.22997897,
        160.14438641, 108.57886964,   6.97851325])

degree = 2
poly = PolynomialFeatures(degree)
X_poly = poly.fit_transform(X) 


model = LinearRegression()
model.fit(X_poly, y)


print("Model coefficients:", model.coef_)
print("Model intercept:", model.intercept_)


X_poly_input = poly.transform(np.array([11.68125127, 78.20767904]).reshape(1,-1))
output_data = model.predict(X_poly_input)
print(f"Final answer is: {output_data}")

x1_vals = np.linspace(X[:, 0].min(), X[:, 0].max(), 50)  # Angle range
x2_vals = np.linspace(X[:, 1].min(), X[:, 1].max(), 50)  # Pixel size range
x1_vals, x2_vals = np.meshgrid(x1_vals, x2_vals)  # Create grid for plotting


X_surface = np.column_stack((x1_vals.ravel(), x2_vals.ravel()))
X_surface_poly = poly.transform(X_surface)  # Transform for polynomial prediction
y_surface = model.predict(X_surface_poly).reshape(x1_vals.shape)  # Reshape predictions


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(X[:, 0], X[:, 1], y, color='blue', label='Training Data')

ax.plot_surface(x1_vals, x2_vals, y_surface, color='red', alpha=0.5)
ax.set_xlabel('Angle (degrees)')
ax.set_ylabel('Pixel Size (pixels)')
ax.set_zlabel('Distance (meters)')
plt.title('Polynomial Regression Fit for Distance Calculation')
plt.legend()

plt.show()
